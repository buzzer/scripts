#!/bin/bash


########## CONFIGURATION: start ################################################


GMAPPING_HOME=${HOME}/gmapping/trunk/
GUI=1

#See the gmapping documentation for explanation on the next line (the arguments
#  given to the gmapping program. You'll probably want to change maxUrange and 
#  max range ( which are the maximum laser used by the algorithm, and the 
#  real maximum range given by the laser), angularUpdate and linearUpdate 

GMAPPING_ARGS="-particles 100 -maxUrange 5.4 -maxrange 5.6 -sigma 0.1     \
    -srr 0.1 -str 0.1 -stt 0.1 -srt 0.1 -angularUpdate 0.4 -linearUpdate 0.4       \
    -resampleThreshold 0.5 -xmax 17 -ymax 17"

#The program site (http://pr.willowgarage.com/wiki/RunningGMappingOffline)
#suggests to use this call: ${GMAPPING_HOME}/bin/gfs_simplegui -filename rospack
#find laser_pose_interpolator/carmen.txt -outfilename <OUTPUT> -particles 30
#-maxUrange 16 -maxrange 30 -sigma 0.1 -srr 0.1 -str 0.1 -stt 0.1 -srt 0.1
#-angularUpdate 1.0 -resampleThreshold 0.7

########## CONFIGURATION: end ##################################################


################################################################################
########## DO NOT EDIT BELOW THIS LINE #########################################
################################################################################

# Checking argument variables
	if [ ! $# -eq 2 ]; then
		echo "USAGE: $0 <player_log_file_path> <output_map_image_name>"
		exit 0
	fi
# Checking gmapping folder existence
# TODO: check that this is actually the right directory. Up to now, it only
#       checks that the directory exists
	FOLDER=`pwd`
	cd $GMAPPING_HOME
	if [ ! $?  -eq 0 ]; then
		echo "You should modify this script and set the right GMAPPING home dir"
		exit 1
	fi
	cd $FOLDER

#Making temporary files
#WARNING: some files are generated by the gmapping program in the home directory
#         The only temporary file that this program generates outside the /tmp
#         directory is GMAPPING_OUTPUTLOG. That is done to give the possibility
#         to redo the image generation if something goes wrong (i.e., keeping
#         the actual gfs_* calculations (see below for details).
	TMPDIR=`mktemp -d /tmp/gmapping.XXXXXX`
	CARMENLOG=`mktemp -t carmenlog.XXXXX`
	GMAPPING_OUTPUTLOG=`mktemp -t gmapping_outputlog.XXXXX`

	
#Translating the log into Carmen log
	PLAYERLOG=$1
    if  [ -e  `which playerlog2carmenlog.py` ]; then 
        echo "Please install PLAYER and put it in the PATH. I cannot find \
              playerlog2carmenlog.py"
        exit 1;
    fi
	echo	 EXECUTING: playerlog2carmenlog.py $PLAYERLOG $CARMENLOG
    echo     PLEASE WAIT....
	playerlog2carmenlog.py $PLAYERLOG $CARMENLOG

#Executing Gmapping
	cd  $TMP_DIR

	echo PRESS A KEY TO KILL GMAPPING  THREAD
    echo since some times that program fails to terminate properly.
	sleep 1
	if [ $GUI -eq 0 ]; then
        PROGRAM="gfs_nogui"
    else
        PROGRAM="gfs_simplegui"
    fi
#Generate the images
    $GMAPPING_HOME/bin/$PROGRAM -filename $CARMENLOG -outfilename                  \
    $GMAPPING_OUTPUTLOG $GMAPPING_ARGS &
	GMAPPING_PID=$!
	read $WAIT_FOR_KEY_PRIOR_KILLING_GMAPPING_THREAD
	kill -9 $GMAPPING_PID
	rm -f -- rawpath.dat w-*.dat
	$GMAPPING_HOME/bin/gfs2img -filename $GMAPPING_OUTPUTLOG -maxrange 3.8
	MAP=`ls /tmp/gmapping*PNG -tr|tail -n 1`
	echo map: $MAP
	cd $FOLDER
	cp $MAP $2
	rm -Rf /tmp/gmapping*
	rm -Rf /tmp/carmen*




