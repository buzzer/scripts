#!/bin/bash
# 2010-09-09 Sebastian Rockel
# Copied from internet and modified
#
# Takes all video files in directory given at $1
# Outputs ipod/iphone compatible video files in $ODIR
# Using 2-pass encoding

FFMPEG="/opt/local/bin/ffmpeg"
VIDEOPAR="/Users/sebastian/bin/videopar"
LOGFILE="$HOME/`basename $0`.log"
THREADS=0 # 0 sets automatic
ODIR="/Users/sebastian/Music/iTunes/iTunes Music/Movies/"

# TODO take also relative paths
if [ "$1" = "" ] || [ ! -f "$1" ]
then
  #echo "usage: iPhone-EncDir input_directory"
  echo "usage: `basename $0` <input_video>"
  echo "Absolute path is needed!"
  exit 0
fi

# Source file parameters
i=0
for par in `$VIDEOPAR "$1"`; do
  case $i in
    0 ) resolution=$par
        vwidth=`echo $resolution | sed -e 's/x.*//'`
        vheight=`echo $resolution | sed -e 's/.*x//'` ;;
    1 ) audiorate=$par ;;
    2 ) audiochan=$par ;;
  esac
  let i=$i+1
done

# ffmpeg cannot handle more than 2 channel audio
case $audiochan in
  1)        audiochan=1;;
  "mono")   audiochan=1;;
  2)        audiochan=2;;
  "stereo") audiochan=2;;
  *) echo "Embedded audio track not compatible: $audiochan. No audio!" ; audiochan=0 ;;
esac

# Output parameters of video
MAXRATE="1450k"
VBITR1=512
VBITR2=416
VBITR3=320
VBITR=$VBITR1
ABITR1=96
ABITR2=48
ABITR=$ABITR1
ARATE1=44100
ARATE2=22050
ARATE=$ARATE1
# Calculate video width and height
VWIDTH_STD=480 ; VHEIGHT_STD=320 # iPod default
VRatioIpod=`echo "$VWIDTH_STD/$VHEIGHT_STD" | bc -l`
OriVRatio=`echo "$vwidth/$vheight" | bc -l`

# Video bitrate optimizations
if [ $vwidth -lt $VWIDTH_STD ] ; then
  VBITR=$VBITR3
elif [ $vwidth -lt 720 ] ; then
  VBITR=$VBITR2
else
  VBITR=$VBITR1
fi

# Audio bitrate optimizations
if [ $audiochan -eq 1 ] ; then
  ABITR=$ABITR2
  ARATE=$ARATE2
fi

# Do not scale small videos
if [ $vwidth -lt $VWIDTH_STD ] ; then
  VWIDTH=$vwidth
else
  VWIDTH=$VWIDTH_STD
fi
if [ $vheight -lt $VHEIGHT_STD ] ; then
  VHEIGHT=$vheight
else
  VHEIGHT=$VHEIGHT_STD
fi

# Crop
if [ `echo "$OriVRatio<$VRatioIpod" | bc` -eq 1 ] ; then
  if [ $vheight -gt $VHEIGHT_STD ] ; then
    vCrop=`echo "($vheight-($vwidth/$VRatioIpod))/2" | bc`
  fi
elif [ `echo "$OriVRatio>$VRatioIpod" | bc` -eq 1 ] ; then
  if [ $vwidth -gt $VWIDTH_STD ] ; then
    hCrop=`echo "($vwidth-($vheight*$VRatioIpod))/2" | bc`
  fi
fi
if [ $hCrop ] ; then
  cx=$hCrop
else
  cx=0
fi
if [ $vCrop ] ; then
  cy=$vCrop
else
  cy=0
fi
cwidth=`echo "$vwidth-2*$cx" | bc`
cheight=`echo "$vheight-2*$cy" | bc`

echo
echo "Encode with following settings:"
echo video bitrate: "$VBITR"
echo audio bitrate: "$ABITR"
echo audio sample rate: "$ARATE"
echo audio channels: $audiochan
echo src video size: "$vwidth"x"$vheight"
echo aspect ratio: "$OriVRatio"
echo out video size: "$VWIDTH"x"$VHEIGHT"
echo out aspect ratio: "$VRatioIpod"
echo crop: "$cx:$cy:$cwidth:$cheight"
echo 2-pass encoding
echo threads: $THREADS
echo output directory: $ODIR
echo

# Check for debug mode
if [ ! $DEBUG ] ; then

# Create unique temp directory
RANPREFIX="`basename $0`-""$RANDOM"
TMPDIR="/tmp/$RANPREFIX/" ;
[ -d "$TMPDIR" ] || mkdir "$TMPDIR" || exit -1
cd $TMPDIR

IFILE="$1"
OFILE="$TMPDIR"`basename "$1"`.mp4

echo "`date` `basename "$OFILE"` BEGIN ENCODING" >> $LOGFILE

# 1st pass
$FFMPEG -an -pass 1 \
  -i "$IFILE" \
  -threads $THREADS \
  -vf "crop=$cx:$cy:$cwidth:$cheight,scale=$VWIDTH:$VHEIGHT" \
  -vcodec libx264 \
  -flags +loop \
  -cmp +chroma \
  -partitions +parti4x4+partp4x4+partp8x8+partb8x8 \
  -subq 1 \
  -trellis 0 \
  -refs 2 \
  -coder 0 \
  -me_range 24 \
  -g 250 \
  -keyint_min 30 \
  -sc_threshold 40 \
  -i_qfactor 0.71 \
  -flags2 \
  -bpyramid-wpred-mixed_refs-dct8x8+fastpskip \
  -b "$VBITR"k \
  -minrate 75k \
  -maxrate $MAXRATE \
  -bufsize 10M \
  -rc_eq 'blurCplx^(1-qComp)' \
  -qcomp 0.75 \
  -qmin 10 \
  -qmax 51 \
  -qdiff 9 \
  -level 30 \
  -f rawvideo -y /dev/null || exit -1

  # 2nd pass
$FFMPEG \
  -i "$IFILE" \
  -acodec libfaac \
  -ab "$ABITR"k \
  -ar $ARATE \
  -ac $audiochan \
  -pass 2 \
  -threads $THREADS \
  -vf "crop=$cx:$cy:$cwidth:$cheight,scale=$VWIDTH:$VHEIGHT" \
  -vcodec libx264 \
  -flags +loop \
  -cmp +chroma \
  -partitions +parti4x4+partp4x4+partp8x8+partb8x8 \
  -subq 1 \
  -trellis 2 \
  -refs 4 \
  -coder 0 \
  -me_range 24 \
  -g 250 \
  -keyint_min 30 \
  -sc_threshold 40 \
  -i_qfactor 0.71 \
  -b "$VBITR"k \
  -minrate 75k \
  -maxrate $MAXRATE \
  -bufsize 10M \
  -rc_eq 'blurCplx^(1-qComp)' \
  -qcomp 0.75 \
  -qmin 10 \
  -qmax 51 \
  -qdiff 9 \
  -level 30 \
  "$OFILE" && mv "$OFILE" "$ODIR""`basename "$OFILE"`" && \
    echo && echo Moved "$OFILE" to "$ODIR""`basename "$OFILE"`" && echo

echo "`date` `basename "$OFILE"` END ENCODING" >> $LOGFILE

# Clean log files
rm ffmpeg2pass-0.log x264_2pass.log* || exit -1
rm -r $TMPDIR || exit -1

fi

exit 0
