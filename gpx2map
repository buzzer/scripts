#!/usr/bin/perl
# File name: ''gpx2map''
# Function: Converts track data in GPX format (e.g. from a Garmin naviagation
#           system with gpsbabel) to a Yahoo Maps MashUp of the route
#  status: implementing
#
#      created: 2007-07-27
#      Version: $LastChangedRevision: 326 $
#  last change: $LastChangedDate: 2009-05-26 19:19:14 +0200 (Tue, 26 May 2009) $
#  Based on code from Mike Schilli, 2006 (m@perlmeister.com)
#  http://www.linux-magazin.de/heft_abo/ausgaben/2006/07/hinterm_horizont
# Improvements Copyright (C) 2007-2009 Robert Lange (robert.lange@s1999.tu-chemnitz.de)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.


# ******************** MODIFY CUSTOM SETTING BELOW THIS LINE *******************
# *** global settings ***

my %opts = (        # Processed options for use in the program
                    # with defaults, some can be overridden by command line

    # Input file name from command line
    # infile,

    # Route to process, when not specified just use all points in gpx file
    # route

    # Merge all track points from all routes to one file, then this is set
    merge => 0,

    # Title of web page (by command line)
    # title

    # when true create Yahoo Mash-Up, false for Google
    yahoo => 0,

    # Map template file, expect in same directory as script
    map_template_yahoo  => 'gpx2map.yahoo.template',
    map_template_google => 'gpx2map.google.template',

    # The API keys for Google and Yahoo, please replace with your own key
    map_key_yahoo  => 'YahooDemo',               # Demo key (should work locally)
    # Author's Google Maps key for sethdepot.org/share
    #map_key_google => '&amp;key=ABQIAAAAajGSZN0bMmpMvHsRRY8B0RTPX4EUnlZovsq1W3UHTnSx--0QTxRp7ucVJohcBLshPbUFJFUYEf7eJw',
    # SROs Google Maps key for buzzer.kicks-ass.net
    map_key_google => '&amp;key=ABQIAAAAwlbqQEMgpPU6Oz1ejjDxvRSRLY_tI7s6Uvlwn_Erq5wtBeqrkBSK2mmx4LzDlWVue442_RE75pmPdg',
    # map_key_google => '',     # Empty key for demonstration (should work locally)


    # Distance between Polyline points in kilometer
    # map_line_dist => '0.025',        #   25 meter
    map_line_dist => '0.005',          #   5 meter
    # Distance between mapping points in kilometer (multiple of map_line_dist)
    map_points_dist => '2.0',        # 2000 meter

    # Call to gpsbabel for your convenience, w/o output file name
    gpsbabel_cmd => [ "gpsbabel", "-D", "1", "-t", "-i" ,"garmin",
		      "-f", "/dev/ttyUSB0", "-o", "gpx", "-F"]
);

# **************************** END OF CUSTOM SETTINGS **************************
# *** DON'T CHANGE ANYTHING BELOW THIS LINE UNTIL YOU KNOW WHAT YOU'RE DOING ***


# *** Packages to use ***
use strict;
use warnings;
use Getopt::Long;       # Command line parsing
use XML::Twig;          # XML Parser
use Template;           # Template toolkit for map Mash-Up
use FindBin;            # Find local directory
use File::Basename;     # File's basename

# Geo::Distance package is on my system locally installed,
# but of course prefer global version
if (! eval "use Geo::Distance; 1") {
  # Not found globally, try local
  use lib "$FindBin::RealBin/cpan";
  use Geo::Distance;      # Distance calculation (locally)
}


# *** Subroutine declarations ***
# main routine without any arguments
sub main ();
# Return version string from SVN tag with copyright
# 1.P: true when printing verbose copyright string
sub versionstring ($);
# reads the command line options
sub read_commandline();
# Handler for processing XML <trk> in individual-track mode
sub process_trk_xml_handler($$);
# Handler for parsing XML <trkpt> elements
sub read_trkpt_xml_handler($$);
# Handler for parsing XML <trk> elements
sub read_trk_xml_handler($$);
# Calculate traveled distance
sub calc_dist();
# Do map mash-up; API independent part
# 1.P: Webpage title
sub map_mashup($);
# Map mash-up  for Yahoo
# 1.P: Ref to line points array
# 2.P: Ref to marker array
# 3.P: Output file name
# 4.P: Webpage title
sub map_mashup_yahoo(\@\@$$);
# Map mash-up  for Google
# 1.P: Ref to line points array
# 2.P: Ref to marker array
# 3.P: Output file name
# 4.P: Webpage title
sub map_mashup_google(\@\@$$);
# Invoke gpsbabel
# 1.P: output file
sub gpsbabel($);


# *** global variables/constants ***
# Program name (constant)
our $Prog_Name = "gpx2map";
# Array of Hash of track points
# Hash entries: lat(itude), lon(itude), ele(vation)
my @points = ();
# Calculated distance
my $dist;


# ***************************** Documentation ***************************


my $Help_Documentation=<<EOF;
DESCRIPTION

$Prog_Name reads a gps track in GPX format (as produced by
e.g. gpsbabel) and writes out an Google or Yahoo Map Mash-up
containing the route.

USAGE

     $Prog_Name [--help|-h] [--version|-V] [--route|-r route]
                [--title|-t title] [--merge] [--yahoo|-y]  inputfile

       --help, -h                This help screen
       --version, -V             Version

       --yahoo, y                Create Yahoo Mash-Up, Default is Google

       --title, -t <title>       Title of web page, when not specified
                                 use route name (or leave empty)

       --route, -r <route>       Route to read

       --merge                   Use all points from all routes in gpx
                                 file

    inputfile                    GPX file to read

When neither "--route" nor "-merge" are specified, create
individual web pages for each route.

Output is written to <inputfile_without_suffix>[.<route>].html

GPSBABEL INVOCATION

For your convenience gpsbabel can be invoked over $Prog_Name.
Just use the following command line:
     $Prog_Name --babel outfile

EOF




# *** "body" of the program ***
main();


# *** main routine ***
sub main() {

  # *** Variables
  my $twig;              # XML Twig module
  my $title;             # Generated web page title

  # *** read the command line
  read_commandline();

  # Print Name/Version
  print versionstring(0);

  # *** Do parsing depending on the modi selected
  if ( $opts{'merge'} or defined $opts{'route'} ) {
    # *** Single processing; thats easy

    # Set Title when not specified
    if ( $opts{'title'} ) {  # When set just take it
      $title = $opts{'title'};
    } else {   # Derive it from route or program name
      if ( $opts{'route'} ) { # Use route, when specified
	$title = $opts{'route'};
      } else {    # Otherwise use program name
	$title = $Prog_Name;
      }
    }

    if ( ! $opts{'route'} ) { # parse every trkpt element when no route specified
      print "Operation mode: Merge all track points to one file\n";
      $twig = XML::Twig->new(
			     TwigHandlers => {
					      "trkpt" => \&read_trkpt_xml_handler,
					     }
			    );
    } else {  # only parse specified route
      print "Operation mode: Read only one route\n";
      $twig = XML::Twig->new(
             TwigHandlers => {
	           "trk[string(name)=\"$opts{'route'}\"]" => \&read_trk_xml_handler
			     }
      );
    }

    print "Reading file $opts{'infile'} ...\n";
    if ( $opts{'route'} ) {
      print "   Reading track \"$opts{'route'}\" ...\n";
    }

    # Trigger XML parsing
    $twig->parsefile($opts{'infile'})
      or die "Failed loading $opts{'infile'}";
    $twig->purge;          # Throw away XML, is parsing is done

    # Sanity check: Where values read?
    if ( ! @points ) {
      print "ERROR: Could not read any track points for this route\nAborting\n";
      return 0;
    }

    # *** Calculate distance
    calc_dist();

    # *** Do the mash-up
    map_mashup($title);

    return 0;         # exit without error
  }  # Single processing done

  # Now we're in the else path, which means we have to write out every
  # single route in individual files
  # Hand then whole work to the XML handler, which is called for each "trk"
  print "Operation mode: Write each route into a separate file\n";
  $twig = XML::Twig->new(
	 TwigHandlers => {
			  "trk" => \&process_trk_xml_handler
	 }              );

  # Trigger XML parsing
  $twig->parsefile($opts{'infile'})
    or die "Failed loading $opts{'infile'}";

  return 0;         # exit without error
}


# *** Handler for processing XML <trk> in individual-track mode ***
{
# Sub-routine "static" variable
# Collects set of title, so that each title is individual
my %used_titles;

sub process_trk_xml_handler($$) {
    my($t, $trk)= @_;        # Twig handler arguments: whole twig and <trk> part
    my $title;               # Title of track

    # Get title of track
    if ( $opts{'title'} ) {      # Use command line title when availabe
      $title = $opts{'title'};
    } else {   # Take track name
      $title = $trk->first_child_text('name');
      # When not defined, just use program name as last resort
	$title = $Prog_Name
	  unless $title;
    }

    while ($used_titles{$title} ) {
      # Title name (and therefore file name) is not individual
      # First of all, try to count up last number (when available)
      if ( $title =~ /(.+\s+)(\d+)$/ ) {
        $title = $1 . ($2+1);
      } else {
	# Otherwise add new suffix
	$title .= " 2";
      }
    }
    # okay, this title was not used yet
    $used_titles{$title} = 1;

    # Parsing itself is done by read handler
    read_trk_xml_handler($t, $trk);

    # Sanity check: Where values read?
    if ( ! @points ) {
      print "WARNUNG: Could not read any track points for this route (title $title)\n";
      return 0;
    }

    # Calculate distance
    calc_dist();

    # Do the mash-up
    map_mashup($title);

    # Now throw away this parsed track
    $t->purge;

    # Clean up global variables for next (possible) run
    undef $dist;
    undef @points;

    return 0;    # do not continue process any other handlers (not there anyway)
}
}

# ##############################################################################

# *** Handler for parsing XML <trk> elements ***
sub read_trk_xml_handler($$) {
    my($t, $trk)= @_;

    # Parse all trkpt points by trkpt handler
    foreach ( $trk->first_child("trkseg")->children("trkpt") ) {
      read_trkpt_xml_handler($t, $_)
	or return 0;             # Just return error
    }

    return 1;    # continue processing with other handlers (if any)
}

# *** Handler for parsing XML <trkpt> elements ***
sub read_trkpt_xml_handler($$) {
    my($t, $trkpt)= @_;

    my $lat     = $trkpt->att('lat');
    my $lon     = $trkpt->att('lon');
    my $ele;
    # SRO Catch case when no 'ele' is given
    if($trkpt->first_child('ele')) {
      $ele     = $trkpt->first_child('ele')->text();
    } else {
      $ele = 0.0;
    }

    push @points, {
        lat => $lat, lon => $lon, ele => $ele
		  };

    return 1;    # continue processing with other handlers (if any)
}

# *** Calculate traveled distance ***
sub calc_dist() {
  # *** Variables
  my $geo    = Geo::Distance->new();
  my $total = 0;
  my $last_pt;

  # *** Calculation
  for my $trkpt (@points) {
  if($last_pt) {
      my $k = $geo->distance("kilometer",
			     $last_pt->{lon}, $last_pt->{lat},
			     $trkpt->{lon},   $trkpt->{lat});
      $total += $k;
    }
  $last_pt = $trkpt;
  }
  $dist = sprintf ( "%.2fkm", $total );

  print "Total distance is " . $dist . " \n";
}

# *** # Do map mash-up; API independent part ***
# 1.P: Webpage title
sub map_mashup($) {
  # *** Variables
  my $title   = shift;        # Title from parameter
  my $geo     = Geo::Distance->new();
  my $pdist   = 0;   # Distance between map points
  my $accdist = 0;   # Accumulated distance between map points
  my @mpoints = ();  # Map points (reference to @points)
  my @ppoints = ();  # Polyline points  (reference to @points)
  my $last_pt;       # Last point
  my $k = 0;         # For distance calculation
  my $filename;      # Output file name

  # *** Only take selected points
  for my $trkpt (@points) {
    if($last_pt) {
      $k = $geo->distance("kilometer", 
			  $last_pt->{lon}, $last_pt->{lat},
			  $trkpt->{lon},   $trkpt->{lat});

      next if $k < $opts{'map_line_dist'};
    } else {
      # Add first point (Track start) always
      push @mpoints, $trkpt;
    }
    $last_pt = $trkpt;
    # First add line points
    push @ppoints, $trkpt;
    $accdist += $k;
    # Also add as marker?
    next if $accdist < $opts{'map_points_dist'};   # no, not needed
    $pdist += $accdist;
    $accdist = 0;             # clear for next marker point
    $trkpt->{dist} = $pdist;  # Distance from start
    push @mpoints, $trkpt;
  }
  # And now also add last point (end of track)
  # Only add it when it's not done in above loop
  $last_pt = $points[$#points];
  push @mpoints, $last_pt
    unless $last_pt == $mpoints[$#mpoints];


  # *** Output file name, from input file name
  {
    my ($base,$path,$type) = fileparse($opts{'infile'}, qr{\.[^\.]+});
    my $fn_title = "";    # Add title name when supplied
    if ( $title ) {
      $fn_title = "-$title";
      $fn_title =~ s/ /_/g;         # replace spaces by "_"
    }
    $filename = $path . $base . $fn_title . ".html";
  }

  # *** Call appropriate Mash-Up Function
  if ( $opts{'yahoo'} ) {
    map_mashup_yahoo(@ppoints, @mpoints, $filename, $title);
  } else {
    map_mashup_google(@ppoints, @mpoints, $filename, $title);
  }

}

# ##############################################################################

# *** Map mash-up  for Yahoo ***
# 1.P: Ref to line points array
# 2.P: Ref to marker array
# 3.P: Output file name
# 4.P: Webpage title
sub map_mashup_yahoo(\@\@$$) {
  # *** Variables
  my ($lref, $mref, $outfile, $title) = @_;      # Get arguments


  # *** For yahoo just need to format distance to 1 character,
  #     and set dist to "S" and "E" for first/last point
  foreach (@$mref) {
    $_->{dist} = sprintf ( "%.0f", $_->{dist} )
      if $_->{dist};
  }
  $mref->[0]->{dist} = "S";
  $mref->[$#$mref]->{dist} = "E";

  # *** Mash-up
  # Variables for template toolkit
  my $template = Template->new(
			       OUTPUT => $outfile,
			       ABSOLUTE => 1         # Allow absolute file names
			      );
  my $vars     = { points   => $mref,
		   line     => $lref,
		   distance => $dist,
		   title    => $title,
		   apikey   => $opts{'map_key_yahoo'},
		 };

  # Create file
  print "Writing yahoo file $outfile ...\n";
  $template->process("$FindBin::RealBin/$opts{'map_template_yahoo'}", $vars) or
    die $template->error() . "\n";


}

# ##############################################################################

# *** Map mash-up  for Google ***
# 1.P: Ref to line points array
# 2.P: Ref to marker array
# 3.P: Output file name
# 4.P: Webpage title
sub map_mashup_google(\@\@$$) {
  # *** Variables
  my ($lref, $mref, $outfile, $title) = @_;      # Get arguments


  # *** Preparation for Markers
  # Distance with 2 digits and in km
  foreach (@$mref) {
    $_->{dist} = sprintf ( "%.2f km<br>Height: %.0fm", $_->{dist}, $_->{ele} )
      if $_->{dist};
  }
  $mref->[0]->{dist} = sprintf ("0.00 km<br>Height: %.0fm<br>Start Point",
			       $mref->[0]->{ele} );   # 1st point is start
  $mref->[$#$mref]->{dist} = sprintf ("$dist<br>Height: %.0fm<br>End Point",
				     $mref->[$#$mref]->{ele} ); # last point is total distance

  # *** Mash-up
  # Variables for template toolkit
  my $template = Template->new(
			       OUTPUT => $outfile,
			       ABSOLUTE => 1         # Allow absolute file names
			      );
  my $vars     = { points   => $mref,
		   line     => $lref,
		   distance => $dist,
		   title    => $title,
		   apikey   => $opts{'map_key_google'},
		 };

  # Create file
  print "Writing google file $outfile ...\n";
  $template->process("$FindBin::RealBin/$opts{'map_template_google'}", $vars) or
    die $template->error()  . "\n";

}

# ##############################################################################

# *** Invoke gpsbabel ***
# 1.P: output file
sub gpsbabel($) {
  # Arguments
  my $file = shift;

  # Build complete arguments array
  my @args = (@{$opts{'gpsbabel_cmd'}}, $file);

  # Invoke gpsbabel
  print join(" ", @args) . "\n";
  if (! system(@args) == 0 ) {
    print "gpsbabel failed: $?\n";
    return 1;        # Error
  }

  return 0;       # no error

}

# ##############################################################################

# *** reads the command line options ***
sub read_commandline() {

  # *** local variables
  my $help;       # set to one if help screen is requested
  my $ver;        # set to one if version is requested
  my $babel;      # set to one when gpsbabel is requested
                  # Input file is then gpsbabel output file

  Getopt::Long::Configure ("bundling");   # enable bundling level 1
  my $result = GetOptions(\%opts,
			  'route|r=s',
			  'title|t=s',
                          'merge',
			  'yahoo|y!',
			  'help|h|?' => \$help,
			  'version|V' => \$ver,
			  'babel' => \$babel,
			 );
  if (! $result) {
    print STDERR "\nFailed to parse the command line options: Exiting\n";
    exit 1;
  }

  # Wrong number of arguments; just display help text
  if ( scalar @ARGV != 1 ) {
    $help = 1;
  }

  if ( $ver) {
    print versionstring(1)  . "\n";
    exit 0;
  }

  if ( $help) {
    print versionstring(1)  . "\n";
    print $Help_Documentation;
    exit 0;
  }

  # Extract input file
  $opts{'infile'} = $ARGV[0];

  if ( $babel ) {
    exit gpsbabel($opts{'infile'});           # GPS Babel is invoked
  }

}


# *** return version string from svn revision ***
# 1.P: true when printing verbose copyright string
sub versionstring ($) {

    my $verbose = shift;         # True when we should return long version
    my $rev = '$LastChangedRevision: 326 $';
    my $date = '$LastChangedDate: 2009-05-26 19:19:14 +0200 (Tue, 26 May 2009) $';

    # Filter revision
    $rev = $1 if $rev =~ /LastChangedRevision: (\d+)/;

    # Filter date
    $date = $1 if $date =~ /LastChangedDate: ([\d-]+)/;

    return "$Prog_Name revision $rev from $date \n"
       unless $verbose;

    "$Prog_Name revision $rev from $date \n"
      . 'Copyright (C) 2007-2009 Robert Lange (robert.lange@s1999.tu-chemnitz.de)' . "\n"
      . 'Based on code by Mike Schilli, 2006 (m@perlmeister.com)' . "\n"
      . "Licensed under the GNU General Public License\n"
}
