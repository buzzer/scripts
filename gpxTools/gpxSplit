#!/usr/bin/perl
#This work by Sebastian Rockel (sebastianrockel@gmail.com) is licensed under a 
#Creative Commons Attribution-Noncommercial-Share Alike 3.0 Germany License.
#"http://creativecommons.org/licenses/by-nc-sa/3.0/de/"
#
# Original from
# http://blog.dinotools.de/2008/11/24/einzelne-tracks-aus-gpx-dateien-extrahieren
# modified by 2010-06-06 Sebastian Rockel

#use warnings;
use strict;
use File::Basename;

# Geo::Gpx is a Perl module to create and parse GPX files.
# For more information for use see 'perldoc Geo::Gpx'
use Geo::Gpx;

my $EXITOK=0;

# Script paths
my $GPSBABEL='/opt/local/bin/gpsbabel';

die "Missing gpx file argument\n" unless $ARGV[0] =~ /.+\.gpx/;

my $file = $ARGV[0];
my @segments=0;
my @segNames=();
my $tmp_file = "$file.tmp";
$tmp_file =~ s/ /_/g;
my $outPath=(join "/", dirname($file), basename($file,".gpx"))."_";
$outPath =~ s/ /_/g;
#print "IN: $file\n";
#print "TMP: $tmp_file\n";
#print "OUT: $outPath\n";

print "Setting track names ... ";
system("$GPSBABEL -t -r -w -i gpx,gpxver=1.1 -f '$file' -x nuketypes,waypoints -x transform,trk=rte,del -o gpx,gpxver=1.1 -F '$tmp_file'");
print "done\n";

print "Getting track names ... ";

open(INFILE, $tmp_file) or die "Could not open $tmp_file: $!\n";

my $gpxin = Geo::Gpx->new( input => $tmp_file );

#TODO array of references is depreciated
if ( $gpxin->tracks() ) {
  @segments=@{$gpxin->tracks()};
  # Get segments' name
  for (my $count=0; $count < @segments; $count++) {
    push(@segNames, @segments->[$count]->{'name'});
  }
}

close(INFILE);

print "done\n";

my $count = 1;
my $num = @segments;

print "Segments found: $num\n";
print "Extracting segments ... \n";
foreach(@segNames) {
  system("$GPSBABEL -t -r -w -i gpx,gpxver=1.1 -f $tmp_file -x track,name='$_' -o gpx,gpxver=1.1 -F $outPath'$_'.gpx");
  print "Segment $count from $num: $_\n";
  $count++;
}
system("rm -f $tmp_file");
print "done\n";

exit $EXITOK;
